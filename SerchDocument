#include <bits/stdc++.h>
using namespace std;
unordered_map<string,set<pair<int,int>>>wordIndex;
vector<string> split(string s)
{
    transform(s.begin(),s.end(),s.begin(),::tolower);
    s.erase(remove_if(s.begin(),s.end(),::ispunct),s.end());
    vector<string> words;
    string temp = "";
    for(int i =0;i<s.size();i++)
    {
        if(s[i]==' ')
        {
            words.push_back(temp);
            temp = "";
            continue;
        }
        temp.push_back(s[i]);
    }
    words.push_back(temp);
    return words;
}
void buildwordIndex(vector<pair<int, string>> &documents)
{
    for(auto doc:documents)
    {
        int idx = doc.first;
        string content = doc.second;
        vector<string> words = split(content);
        for(int i=0;i<words.size();i++)
        {
            wordIndex[words[i]].insert({idx,i});
        }
    }
}
vector<int>search(string phrase)
{
    vector<string> words = split(phrase);
    if(words.size()==0)return {};
    auto eligible = wordIndex[words[0]];
    for(int i=1;i<words.size();i++)
    {
        auto st = wordIndex[words[i]];
        set<pair<int,int>> newCandidate;
        for(auto x:eligible)
        {
            int doc_id = x.first;
            int idx = x.second;
            if(st.find({doc_id,idx+1}) != st.end())
            {
                newCandidate.insert({doc_id,idx+1});
            }
        }
        eligible = newCandidate;
    }
    set<int>ans;
    for(auto x:eligible)
    {
        ans.insert(x.first);
    }
    vector<int>anss(ans.begin(),ans.end());
    return anss;
    
}
int main() {
    vector<pair<int, string>> documents = {
        {1, "cloud computing is the on-demand availability of computer system resources."},
        {2, "one integrated service for metrics uptime cloud monitoring dashboards and alerts reduces time spent navigating between systems."},
        {3, "monitor entire cloud infrastructure, whether in the cloud computing is or in virtualized data centers."}
    };
    buildwordIndex(documents);
    vector<int> result1 = search("cloud");
    vector<int> result2 = search("cloud monitoring");
    vector<int> result3 = search("cloud computing is");
    cout << "Search results for 'cloud': ";
    for (int docId : result1) {
        cout << docId << " ";
    }
    cout << endl;
    cout << "Search results for 'cloud monitoring': ";
    for (int docId : result2) {
        cout << docId << " ";
    }
    cout << endl;
    cout << "Search results for 'Cloud computing is': ";
    for (int docId : result3) {
        cout << docId << " ";
    }
    cout << endl;
	return 0;
}
